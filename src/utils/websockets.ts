import { io, Socket } from "socket.io-client";
import { Url } from "@/global/url";

// Configuraci√≥n para el logging
const DEBUG = true;

// Construir la URL para WebSockets
const wsUrl = Url.replace("/api", "");
console.log(`üîå Intentando conectar a WebSocket: ${wsUrl}`);

// Conecta al servidor WebSocket
const socket: Socket = io(wsUrl, {
    transports: ["websocket"], // Asegura que se use WebSocket
    reconnection: true,        // Habilita la reconexi√≥n autom√°tica
    reconnectionAttempts: 5,   // N√∫mero de intentos de reconexi√≥n
    reconnectionDelay: 1000,   // Tiempo entre intentos de reconexi√≥n
});

// Eventos de logging para WebSockets
if (DEBUG) {
    // Evento de conexi√≥n
    socket.on("connect", () => {
        console.log(`‚úÖ WebSocket conectado con ID: ${socket.id}`);
    });

    // Evento de desconexi√≥n
    socket.on("disconnect", (reason: string) => {
        console.log(`‚ùå WebSocket desconectado. Raz√≥n: ${reason}`);
    });

    // Evento de error
    socket.on("connect_error", (error: Error) => {
        console.error(`‚ùå Error de conexi√≥n WebSocket: ${error.message}`);
    });

    // Evento de reconexi√≥n
    socket.on("reconnect", (attemptNumber: number) => {
        console.log(`üîÑ WebSocket reconectado despu√©s de ${attemptNumber} intentos`);
    });

    // Evento de intento de reconexi√≥n
    socket.on("reconnect_attempt", (attemptNumber: number) => {
        console.log(`üîÑ Intento de reconexi√≥n #${attemptNumber}`);
    });

    // Evento de error de reconexi√≥n
    socket.on("reconnect_error", (error: Error) => {
        console.error(`‚ùå Error al intentar reconectar WebSocket: ${error.message}`);
    });

    // Evento de fallo en la reconexi√≥n
    socket.on("reconnect_failed", () => {
        console.error(`‚ùå Fall√≥ la reconexi√≥n WebSocket despu√©s de ${socket.io.opts.reconnectionAttempts} intentos`);
    });
}

export default socket;